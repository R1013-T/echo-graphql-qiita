package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"echo-graphql-qiita/graph/model"
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input model.CreatePostInput) (*model.Post, error) {
	post := model.Post{
		ID:      input.ID,
		Title:   input.Title,
		Content: input.Content,
	}

	if err := r.DB.Create(&post).Error; err != nil {
		return nil, err
	}

	return &post, nil
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, input model.UpdatePostInput) (*model.Post, error) {
	post := model.Post{}

	if err := r.DB.First(&post, input.ID).Error; err != nil {
		return nil, err
	}

	post.Title = *input.Title
	post.Content = *input.Content

	if err := r.DB.Updates(&post).Error; err != nil {
		return nil, err
	}

	return &post, nil
}

// DeletePost is the resolver for the deletePost field.
func (r *mutationResolver) DeletePost(ctx context.Context, input model.DeletePostInput) (*model.Post, error) {
	post := model.Post{}

	if err := r.DB.First(&post, input.ID).Error; err != nil {
		return nil, err
	}

	if err := r.DB.Delete(&post).Error; err != nil {
		return nil, err
	}

	return &post, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	post := model.Post{}

	if err := r.DB.First(&post, id).Error; err != nil {
		return nil, err
	}

	return &post, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*model.Post, error) {
	posts := []*model.Post{}

	if err := r.DB.Find(&posts).Error; err != nil {
		return nil, err
	}

	return posts, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
